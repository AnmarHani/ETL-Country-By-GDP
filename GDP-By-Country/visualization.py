"""CountriesByGDP.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1BwLCYVCdcDwLtAKF3UkiPzIOG6ABOuSe

# Imports
"""

import requests
from bs4 import BeautifulSoup
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
import sqlite3

from main import dataframe

"""# Visualization Section

| Plot Type  | Function       | Key Args                 | Use Case                            |
| ---------- | -------------- | ------------------------ | ----------------------------------- |
| Bar Chart  | `px.bar()`     | x, y, color, text        | Compare values across categories    |
| Scatter    | `px.scatter()` | x, y, color, hover\_name | Show relationships & clusters       |
| Line Chart | `px.line()`    | x, y, color              | Time series or continuous data      |
| Pie Chart  | `px.pie()`     | values, names            | Show composition / percentage share |

"""

top10_GDP = dataframe.nlargest(11, 'IMF Estimate')

# Skipping World as a Country, because its an outlier and irrelevant.
## First Way, all countries with values anything except World.
top10_GDP = top10_GDP[top10_GDP['Country'] != 'World']

## Second Way, Start from index 1 instead of 0, skipping the first row.
# top10_GDP = top10_GDP.iloc[1:]

## Third Way, Filter by a value condition.
# top10_GDP = df[df['IMF Estimate'] < 5e13].nlargest(10, 'IMF Estimate')

fig = px.bar(top10_GDP,
             x='Country',
             y='IMF Estimate',
             title='Top 10 Countries by IMF Estimate',
             text='IMF Estimate Human Readable')
# fig.update_traces(textposition='outside')
fig.update_layout(
    yaxis=dict(
        title='GDP IMF Estimate',
        tickformat=',.2s'
    ),
    xaxis_tickangle=-45 # For better readability
)

fig.show()

df_filtered = dataframe[dataframe['Country'] != 'World']

fig = px.scatter(df_filtered, x='IMF Year', y='IMF Estimate',
                 color='Region',
                 hover_name='Country',
                 title='GDP over Years by Country')

fig.update_layout(
    yaxis=dict(
        title='GDP IMF Estimate',
        tickformat=',.2s'
    )
)

fig.show()

# Get the number of Countries for each Region or Continent
## First Way
# region_counts = df['Region'].value_counts()
# region_counts

## Second Way
region_counts_df = dataframe.groupby('Region')['Country'].count().reset_index(name='Num of Countries')
# region_counts_df

fig = px.pie(region_counts_df,
             values='Num of Countries',
             names='Region',
             title='Number of Countries for each Region')

fig.show()